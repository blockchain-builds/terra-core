# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      terra_core_checkout:
        description: 'terra-core checkout (branch,tag, commit)'     
        required: false
        default: 'master'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Setup Go environment
        uses: actions/setup-go@v2.1.3
        with:
          # The Go version to download (if necessary) and use. Supports semver spec and ranges.
          # go-version: # optional
          # Whether to download only stable versions
          stable: true # optional, default is true
          # Used to pull node distributions from go-versions.  Since there's a default, this is typically not supplied by the user.
          # token: # optional, default is ${{ github.token }}

      # Runs a set of commands using the runners shell
      - name: Build Terra Core
        id: terra_core_build
        run: |
          # temporary hack
          GOPATH="/home/runner/go"
          
          # checkout terra core
          git clone https://github.com/terra-project/core/
          cd core
          
          # checkout branch/tag/commit
          git checkout ${{ github.event.inputs.terra_core_checkout }}
          
          # build terra core
          make install
          
          # save version output
          ${GOPATH}/bin/terracli version --long > ${HOME}/version.md
          
          # create binaries archive
          VERSION=$(${GOPATH}/bin/terracli version --long | grep version: | cut -d " " -f2)
          tar -czvf ${HOME}/terra-core-${VERSION}.tar.gz ${GOPATH}/bin/*
          
          # set outputs
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=release_file::${HOME}/terra-core-${VERSION}.tar.gz"
          echo "::set-output name=release_file_name::terra-core-${VERSION}.tar.gz"
          echo "::set-output name=release_body::${HOME}/version.md"
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.terra_core_build.outputs.version }}"
          release_name: "v${{ steps.terra_core_build.outputs.version }}"
          body_path: ${{ steps.terra_core_build.outputs.release_body }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ steps.terra_core_build.outputs.release_file }}
          asset_name: ${{ steps.terra_core_build.outputs.release_file_name }}
          asset_content_type: application/gzip
